[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "The relative path used to access a file in the myFolder folder would be read_csv(“../MyData.csv”)\n\n\n\n\n\nR Projects house several files that can all be used together to create an output object. Having access to all of those files in one place makes it easy to make edits in each file that effect the output.\n\n\n\n\n\nGit is a version control software that allows for the “snap-shotting” of programming files to ensure that older versions of a file can be recovered and altered. Github is software that houses repositories of Git files. Changes to files using Git can be committed and pushed to a Github repository, and files on Github can be pulled from the software for local editing.\n\n\n\n\n\nTibbles print data in different ways than dataframes, displaying the type of data that is shown in each column (integer, character, etc.). Also tibbles do not coerce down to a vector when we subset one column with [], where a dataframe would.\n\n\n\n\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\niris |&gt; \n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nThe two sets of code produce the same 37 x 3 tibble from the iris dataset.\n\n\n\n\n\nLong format data means that the data is formatted so there are more rows than columns when possible. This usually means there is one observation in a given row, and this format is generally preferred for statistical analysis. Wide format data on the other hand will often contain multiple observations in a single row."
  },
  {
    "objectID": "Homework3.html#task-1-conceptual-questions",
    "href": "Homework3.html#task-1-conceptual-questions",
    "title": "Homework 3",
    "section": "",
    "text": "The relative path used to access a file in the myFolder folder would be read_csv(“../MyData.csv”)\n\n\n\n\n\nR Projects house several files that can all be used together to create an output object. Having access to all of those files in one place makes it easy to make edits in each file that effect the output.\n\n\n\n\n\nGit is a version control software that allows for the “snap-shotting” of programming files to ensure that older versions of a file can be recovered and altered. Github is software that houses repositories of Git files. Changes to files using Git can be committed and pushed to a Github repository, and files on Github can be pulled from the software for local editing.\n\n\n\n\n\nTibbles print data in different ways than dataframes, displaying the type of data that is shown in each column (integer, character, etc.). Also tibbles do not coerce down to a vector when we subset one column with [], where a dataframe would.\n\n\n\n\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\niris |&gt; \n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nThe two sets of code produce the same 37 x 3 tibble from the iris dataset.\n\n\n\n\n\nLong format data means that the data is formatted so there are more rows than columns when possible. This usually means there is one observation in a given row, and this format is generally preferred for statistical analysis. Wide format data on the other hand will often contain multiple observations in a single row."
  },
  {
    "objectID": "Homework3.html#task-2-reading-delimited-data",
    "href": "Homework3.html#task-2-reading-delimited-data",
    "title": "Homework 3",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data"
  },
  {
    "objectID": "Homework3.html#glass-data",
    "href": "Homework3.html#glass-data",
    "title": "Homework 3",
    "section": "Glass data",
    "text": "Glass data\n\n1.\n\nglass &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", \n                  col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\",\"Type_of_Glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nData was successfully read in and converted to a tibble containing 214 rows.\n\n\n\n2.\n\nglass |&gt;\n  mutate(Type_of_Glass = factor(Type_of_Glass,\n                                levels = c(1,2,3,4,5,6,7),\n                                labels = c(\"building_windows_float_processed\",\"building_windows_non_float_processed\",\"vehicle_windows_float_processed\",\"vehicle_windows_non_float_processed\",\"containers\",\"tableware\",\"headlamps\")))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nUsed the factor function to convert the levels of Type_of_Glass from numeric values 1-7 to character strings. The tibble still contains 214 rows\n\n\n\n3.\n\nglass |&gt;\n  mutate(Type_of_Glass = factor(Type_of_Glass,\n                                levels = c(1,2,3,4,5,6,7),\n                                labels = c(\"building_windows_float_processed\",\"building_windows_non_float_processed\",\"vehicle_windows_float_processed\",\"vehicle_windows_non_float_processed\",\"containers\",\"tableware\",\"headlamps\"))) |&gt;\n  filter((Fe &lt; 0.2) & (Type_of_Glass %in% c(\"tableware\",\"headlamps\")))\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\nContinued the chain to keep only records with Fe values less than 0.2 and only tableware and headlamp glass types. After filtering the records, there are only 38 rows printed."
  },
  {
    "objectID": "Homework3.html#yeast-data",
    "href": "Homework3.html#yeast-data",
    "title": "Homework 3",
    "section": "Yeast data",
    "text": "Yeast data\n\n1.\n\nyeast &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", \n                    col_names = c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nThe data is space delimited (2 spaces), so the read_table() function was used.\n\n\n\n2.\n\nyeast |&gt;\n  select(-seq_name,-nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nDe-selecting the 2 columns was done with the - operator rather than explicitly selecting the other 8 columns.\n\n\n\n3.\n\nyeast |&gt;\n  select(-seq_name,-nuc) |&gt;\n  mutate(across(where(is.numeric), .fns = list(mean = mean, median = median), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 1,484 × 22\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg median_mcg mean_gvh\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.500       0.49    0.500\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.500       0.49    0.500\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.500       0.49    0.500\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.500       0.49    0.500\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.500       0.49    0.500\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500       0.49    0.500\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.500       0.49    0.500\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.500       0.49    0.500\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.500       0.49    0.500\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.500       0.49    0.500\n# ℹ 1,474 more rows\n# ℹ 11 more variables: median_gvh &lt;dbl&gt;, mean_alm &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   mean_mit &lt;dbl&gt;, median_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, median_erl &lt;dbl&gt;,\n#   mean_pox &lt;dbl&gt;, median_pox &lt;dbl&gt;, mean_vac &lt;dbl&gt;, median_vac &lt;dbl&gt;\n\n\n\nThe across function was used to access all of the numeric columns and create new columns where a function (mean or median) was applied."
  },
  {
    "objectID": "Homework3.html#task-3-combining-excel-and-delimited-data",
    "href": "Homework3.html#task-3-combining-excel-and-delimited-data",
    "title": "Homework 3",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\n\n1.\n\nlibrary(readxl)\nwines &lt;- read_excel(\"../white-wine.xlsx\", sheet = 1)\nwines\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nThe Excel dataset was placed in the folder one above the Quarto document’s working directory, so a relative path was used to read the data in.\n\n\n\n2.\n\nnames_wine &lt;- read_excel(\"../white-wine.xlsx\", sheet = 2)\nnames_wine\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\ncolnames(wines) &lt;- names_wine$Variables\nwines\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nThe names_wine object was read in as a tibble, but needed to be a vector to be assigned to the colnames of the wines tibble. This was done by accessing the first column of the tibble (a vector).\n\n\n\n3.\n\nwines &lt;- wines |&gt; mutate(type = \"white\")\n\n\nIn order for the type column to be added, I needed to overwrite the original tibble (was not working without the overwrite).\n\n\n\n4.\n\nreds &lt;- read_delim(\"../red-wine.csv\", delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(reds) = names_wine$Variables\nreds &lt;- reds |&gt; mutate(type = \"red\")\nreds\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\n5.\n\nall_wines &lt;- dplyr::bind_rows(wines,reds)\n\n\nThere were 4,898 rows in the white wine dataset and 1,599 rows in the red wine dataset. When these datasets are concatenated, they should have 6,497 rows. This is confirmed with the all_wines tibble.\n\n\n\n6.\n\nall_wines |&gt;\n  filter((quality &gt; 6.5) & (alcohol &lt; 132))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\nAfter filtering the tibble with these conditions, there are 1,206 rows; down from the original number of 6,497 rows.\n\n\n\n7.\n\nall_wines |&gt;\n  filter((quality &gt; 6.5) & (alcohol &lt; 132)) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\nThe tibble was rearranged by descending quality.\n\n\n\n8.\n\nall_wines |&gt;\n  filter((quality &gt; 6.5) & (alcohol &lt; 132)) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality)\n\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9\n 2            66             0.36        0.29     124 white       9\n 3            74             0.24        0.36     125 white       9\n 4            69             0.36        0.34     127 white       9\n 5            71             0.26        0.49     129 white       9\n 6            62             0.66        0.48     128 white       8\n 7            62             0.66        0.48     128 white       8\n 8            68             0.26        0.42     105 white       8\n 9            67             0.23        0.31     107 white       8\n10            67             0.23        0.31     107 white       8\n# ℹ 1,196 more rows\n\n\n\nThe tibble was subsetted to only include the 6 specified columns.\n\n\n\n9.\n\nall_wines |&gt;\n  filter((quality &gt; 6.5) & (alcohol &lt; 132)) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(mean_alc = mean(alcohol), sd_alc = sd(alcohol))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality mean_alc\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9    122. \n 2            66             0.36        0.29     124 white       9    122. \n 3            74             0.24        0.36     125 white       9    122. \n 4            69             0.36        0.34     127 white       9    122. \n 5            71             0.26        0.49     129 white       9    122. \n 6            62             0.66        0.48     128 white       8     94.1\n 7            62             0.66        0.48     128 white       8     94.1\n 8            68             0.26        0.42     105 white       8     94.1\n 9            67             0.23        0.31     107 white       8     94.1\n10            67             0.23        0.31     107 white       8     94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: sd_alc &lt;dbl&gt;\n\n\n\n2 new columns were created the contain the mean and standard deviation of the alcohol variable for each grouped wine quality value."
  },
  {
    "objectID": "Homework3.html#task-4-database-practice",
    "href": "Homework3.html#task-4-database-practice",
    "title": "Homework 3",
    "section": "Task 4: Database Practice",
    "text": "Task 4: Database Practice\n\n1.\n\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.3\n\ncon &lt;- dbConnect(RSQLite::SQLite(),\"lahman.db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\n\n2.\n\ntbl(con,\"Teams\") |&gt;\n  filter(yearID == 2015) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\n\n3.\n\ntbl(con, sql(\n  \"SELECT `Teams` .* \n   FROM `Teams`\n   WHERE (`yearID` = 2015.0)\")\n  ) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nThe SQL code was found by applying the show_query() function (from the dplyr package) to the code chain from question #2.\n\n\n\n4.\n\ntbl(con, \"HallOfFame\") |&gt; \n  filter(inducted == \"Y\") |&gt; \n  select(ends_with(\"ID\"), category) |&gt;\n  collect()\n\n# A tibble: 340 × 3\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ 330 more rows\n\n\n\n\n5.\n\ninner_join(tbl(con, \"HallOfFame\") |&gt; filter(inducted == \"Y\") |&gt; select(ends_with(\"ID\"), category),\n           tbl(con, \"People\") |&gt; select(playerID, nameFirst, nameLast), \n           by = c(\"playerID\" = \"playerID\")) |&gt;\n  collect()\n\n# A tibble: 338 × 5\n   playerID  yearID category          nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player            Ty        Cobb     \n 2 ruthba01    1936 Player            Babe      Ruth     \n 3 wagneho01   1936 Player            Honus     Wagner   \n 4 mathech01   1936 Player            Christy   Mathewson\n 5 johnswa01   1936 Player            Walter    Johnson  \n 6 lajoina01   1937 Player            Nap       Lajoie   \n 7 speaktr01   1937 Player            Tris      Speaker  \n 8 youngcy01   1937 Player            Cy        Young    \n 9 bulkemo99   1937 Pioneer/Executive Morgan    Bulkeley \n10 johnsba99   1937 Pioneer/Executive Ban       Johnson  \n# ℹ 328 more rows\n\n\n\nCombining the tibble of Hall of Fame players with the tibble containing their name information.\n\n\n\n6.\n\ntbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = T),\n            Total_W = sum(W, na.rm = T),\n            Total_L = sum(L, na.rm = T)) |&gt;\n  collect() |&gt;\n  mutate(Win_pct = Total_W/G_managed) |&gt;\n  arrange(desc(Win_pct))\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Win_pct\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;\n 1 bensove01         1       1       0       1\n 2 burwebi01         1       1       0       1\n 3 cohenan01         1       1       0       1\n 4 ebeldi99          3       3       0       1\n 5 falkbi01          1       1       0       1\n 6 hardeme01         3       3       0       1\n 7 simmote01         1       1       0       1\n 8 steinte01         2       2       0       1\n 9 sukefcl01         2       2       0       1\n10 tamarjo01         1       1       0       1\n# ℹ 739 more rows\n\n\n\nTibble created containing all Managers in descending order by Win percentage.\n\n\n\n7.\n\ninner_join(inner_join(tbl(con, \"HallOfFame\") |&gt; filter(inducted == \"Y\") |&gt; select(ends_with(\"ID\"), category),\n           tbl(con, \"People\") |&gt; select(playerID, nameFirst, nameLast), \n           by = c(\"playerID\" = \"playerID\")) |&gt;\n           collect(),\n  tbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = T),\n            Total_W = sum(W, na.rm = T),\n            Total_L = sum(L, na.rm = T)) |&gt;\n  collect() |&gt;\n  mutate(Win_pct = Total_W/G_managed) |&gt;\n  arrange(desc(Win_pct)),\n  by = c(\"playerID\" = \"playerID\"))\n\n# A tibble: 97 × 9\n   playerID yearID category nameFirst nameLast G_managed Total_W Total_L Win_pct\n   &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;\n 1 cobbty01   1936 Player   Ty        Cobb           933     479     444   0.513\n 2 wagneho…   1936 Player   Honus     Wagner           5       1       4   0.2  \n 3 mathech…   1936 Player   Christy   Mathews…       346     164     176   0.474\n 4 johnswa…   1936 Player   Walter    Johnson        966     529     432   0.548\n 5 lajoina…   1937 Player   Nap       Lajoie         700     377     309   0.539\n 6 speaktr…   1937 Player   Tris      Speaker       1139     617     520   0.542\n 7 youngcy…   1937 Player   Cy        Young            6       3       3   0.5  \n 8 mackco01   1937 Manager  Connie    Mack          7755    3731    3948   0.481\n 9 mcgrajo…   1937 Manager  John      McGraw        4769    2763    1948   0.579\n10 wrighge…   1937 Pioneer… George    Wright          85      59      25   0.694\n# ℹ 87 more rows\n\n\n\nThe tibbles from the previous 2 questions were combined via an inner join to create the final tibble, consisting of 97 records. This represents 97 people who were both inducted into the Hall of Fame and managed a team."
  }
]